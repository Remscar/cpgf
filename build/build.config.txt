set(BUILD_DEBUG	1) #release=false

# set 1 to enable Lua binding, 0 to disable
set(HAS_LUA	1) #release=false

# set 1 to enable Google V8 binding, 0 to disable
set(HAS_V8 0) #release=false

# set 1 to enable Python binding, 0 to disable
set(HAS_PYTHON 0) #release=false

# set 1 to enable Mozilla SpiderMonkey binding, 0 to disable
set(HAS_SPIDERMONKEY 0) #release=false

# set 1 to enable C++ 0X in GCC, then rvalue reference is enabled
# 0 to disable rvalue reference
set(SUPPORT_GCC_0X 0) #release=false

# set 1 to enable unit tests.
# it requires UnitTest++ installed.
set(HAS_UNITTEST 1) #release=false

# set 1 to enable Boost library, 0 to disable. This is only used in unit test.
set(HAS_BOOST 0) #release=false

set(LIB_SHARED 0)

set(TEST_GCOV 0)
if(UNIX)
	# disable gcov on Linux, otherwise, valgrind will become super slow.
	set(TEST_GCOV 0)
endif(UNIX)


# whether we have GLUT library
set(HAS_GLUT 0) #release=false

### Samples config

# whether we have Box2D library
# this value is not used in library, only used in samples
set(HAS_BOX2D 1) #release=false

# whether we have SFML library
# this value is not used in library, only used in samples
set(HAS_SFML 1) #release=false

# whether we have irrlicht library
# this value is not used in library, only used in samples
set(HAS_IRRLICHT 1) #release=false

# whether we have cocos2dx library
# this value is not used in library, only used in samples
set(HAS_COCOS2DX 1) #release=false



### Unit test config

set(UNIT_TEST_DIR
	/source/UnitTest++
)


### Lua config

if(${HAS_LUA})
	find_package(Lua51)

	if(LUA_INCLUDE_DIR)
		message(STATUS "Found Lua")
		set(LUA_INC ${LUA_INCLUDE_DIR})
		set(LUA_LIB ${LUA_LIBRARIES})
	else(LUA_INCLUDE_DIR)

		message(STATUS "Using configured Lua settings")
		set(LUA_DIR
			/source/lua51
		)

		set(LUA_INC ${LUA_DIR}/src/ ${LUA_DIR}/etc/)

		set(LUA_LIB ${LUA_DIR}/src/liblua.a)

		if(MSVC)
			set(LUA_LIB ${LUA_DIR}/src/lua51.lib)
		endif(MSVC)

		if(UNIX)
			set(LUA_LIB ${LUA_LIB} "dl")
		endif(UNIX)
	endif(LUA_INCLUDE_DIR)
endif(${HAS_LUA})


### V8 config

if(${HAS_V8})
	set(V8_DIR
		c:/source/v8
	)

	set(V8_INC ${V8_DIR}/include)

	if(MSVC)
		set(V8_LIB ${V8_DIR}/v8.lib)
	else(MSVC)
		set(V8_LIB ${V8_DIR}/libv8.so)
	endif(MSVC)

endif(${HAS_V8})



### Python config

if(${HAS_PYTHON})
	FIND_PACKAGE(PythonLibs)

	if(PYTHON_INCLUDE_DIR)
		set(PYTHON_INC ${PYTHON_INCLUDE_DIR})
		set(PYTHON_LIB ${PYTHON_LIBRARY})
	else(PYTHON_INCLUDE_DIR)
		set(PYTHON_DIR
			c:/source/Python
		)

		set(PYTHON_INC ${PYTHON_DIR}/include)

		if(MSVC)
			set(PYTHON_LIB
				debug ${PYTHON_DIR}/libs/python27_d.lib
				optimized ${PYTHON_DIR}/libs/python27.lib
			)
	    else(MSVC)
			set(PYTHON_LIB ${PYTHON_DIR}/libs/libpython27.a)
		endif(MSVC)
	endif(PYTHON_INCLUDE_DIR)
endif(${HAS_PYTHON})



### SpiderMonkey config

if(${HAS_SPIDERMONKEY})
	set(SPIDERMONKEY_DIR
		c:/source/xulrunner-sdk
	)

	set(SPIDERMONKEY_INC ${SPIDERMONKEY_DIR}/include/)

	if(MSVC)
		set(SPIDERMONKEY_LIB ${SPIDERMONKEY_DIR}/lib/mozjs.lib)
		set(SPIDERMONKEY_DEFINE -DXP_WIN)
	else(MSVC)
		set(SPIDERMONKEY_LIB ${SPIDERMONKEY_DIR}/lib/lib.a)
		set(SPIDERMONKEY_DEFINE )
	endif(MSVC)
endif(${HAS_SPIDERMONKEY})



### glut config

if(MSVC)
	set(GLUT_DIR
		c:/source/freeglut/vc
	)
	set(GLUT_LIB ${GLUT_DIR}/lib/freeglut.lib)
else(MSVC)
	set(GLUT_DIR
		c:/source/freeglut/mingw
	)
	set(GLUT_LIB ${GLUT_DIR}/lib/libfreeglut.a opengl32 glu32)
endif(MSVC)

set(GLUT_INC ${GLUT_DIR}/include)



### Box2D config

set(BOX2D_DIR
	c:/source/Box2D/Box2D
)

if(MSVC)
	set(BOX2D_LIB ${BOX2D_DIR}/lib/Box2D.lib)
else(MSVC)
	set(BOX2D_LIB ${BOX2D_DIR}/lib/libBox2D.a)
endif(MSVC)

set(BOX2D_INC ${BOX2D_DIR}/)




### SFML config

set(SFML_DIR
	c:/source/SFML-1.6
)

if(MSVC)
	set(SFML_LIB_DIR ${SFML_DIR}/lib/vc2008)
	set(SFML_LIB
		${SFML_LIB_DIR}/sfml-audio-d.lib
		${SFML_LIB_DIR}/sfml-graphics-d.lib
		${SFML_LIB_DIR}/sfml-network-d.lib
		${SFML_LIB_DIR}/sfml-system-d.lib
		${SFML_LIB_DIR}/sfml-window-d.lib
	)
else(MSVC)
	set(SFML_LIB_DIR ${SFML_DIR}/lib/gcc)
	set(SFML_LIB
		${SFML_LIB_DIR}/libsfml-audio-d.a
		${SFML_LIB_DIR}/libsfml-graphics-d.a
		${SFML_LIB_DIR}/libsfml-network-d.a
		${SFML_LIB_DIR}/libsfml-system-d.a
		${SFML_LIB_DIR}/libsfml-window-d.a
	)
endif(MSVC)

set(SFML_INC ${SFML_DIR}/include)


### irrlicht config

set(IRRLICHT_DIR
	c:/source/irrlicht-1.8
)

if(MSVC)
	set(IRRLICHT_LIB_DIR ${IRRLICHT_DIR}/lib/Win32-visualstudio)
	set(IRRLICHT_LIB ${IRRLICHT_LIB_DIR}/Irrlicht.lib)
else(MSVC)
endif(MSVC)

set(IRRLICHT_INC ${IRRLICHT_DIR}/include)


### Boost config

set(BOOST_DIR
	c:/source/boost
)

set(BOOST_INC ${BOOST_DIR})


### cocos2dx config

set(COCOS2DX_DIR
	D:/source/cocos2d-x-3.3beta0
)

if(MSVC)
	set(COCOS2DX_LIB_DIR ${COCOS2DX_DIR}/build/Debug.win32)
	set(COCOS2DX_LIB ${COCOS2DX_DIR}/libcocos2d.lib)
else(MSVC)
endif(MSVC)

set(COCOS2DX_INC
	${COCOS2DX_DIR}/cocos
	${COCOS2DX_DIR}/cocos/audio/include
	${COCOS2DX_DIR}/cocos/platform
	${COCOS2DX_DIR}/cocos/platform/desktop
	${COCOS2DX_DIR}/external/glfw3/include/win32
	${COCOS2DX_DIR}/external/win32-specific/gles/include/OGLES
)


